// <auto-generated />
using BookCave.Data;
using BookCave.Models.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace vln2_group42.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20180505152540_staffEdit")]
    partial class staffEdit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookCave.Data.EntityModels.Author", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("Description");

                    b.Property<string>("ImagePath");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.Book", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CoverPath");

                    b.Property<string>("ISBN")
                        .IsRequired();

                    b.Property<int>("InventoryCount");

                    b.Property<float>("Price");

                    b.Property<float>("PriceModifier");

                    b.Property<DateTime>("PublishDate");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.BookAuthor", b =>
                {
                    b.Property<int>("BookID");

                    b.Property<int>("AuthorID");

                    b.HasKey("BookID", "AuthorID");

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.BookGenre", b =>
                {
                    b.Property<int>("BookID");

                    b.Property<int>("GenreID");

                    b.HasKey("BookID", "GenreID");

                    b.ToTable("BookGenres");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.BookInOrder", b =>
                {
                    b.Property<int>("BookID");

                    b.Property<int>("OrderID");

                    b.Property<float>("Price");

                    b.HasKey("BookID", "OrderID");

                    b.ToTable("BooksInOrders");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.BookReview", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookID");

                    b.Property<int>("CustomerID");

                    b.Property<float>("Rating");

                    b.Property<string>("Text");

                    b.HasKey("ID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.BooksInList", b =>
                {
                    b.Property<int>("BookID");

                    b.Property<int>("ListID");

                    b.HasKey("BookID", "ListID");

                    b.ToTable("BooksInLists");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("CardExpiry");

                    b.Property<string>("CardNumber");

                    b.Property<string>("Country");

                    b.Property<string>("Email");

                    b.Property<bool>("IsStaff");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Postcode");

                    b.Property<string>("Salt");

                    b.HasKey("ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.CustomerList", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerID");

                    b.Property<string>("Description");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Lists");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.Genre", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerID");

                    b.Property<DateTime>("DateCompleted");

                    b.Property<float>("ShippingCost");

                    b.Property<int>("Status");

                    b.Property<float>("TotalCost");

                    b.HasKey("ID");

                    b.ToTable("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
